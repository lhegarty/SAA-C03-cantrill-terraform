#######################
# Create Private Key  #
#######################

# downside to this approach is that the private key is stored in state, not the end of the world if state 
# is encrypted at rest inside of s3 bucket. Creates a .pem which is macOs compatible

resource "tls_private_key" "A4L_private_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

#######################
# Create SSH Key Pair #
#######################

resource "aws_key_pair" "A4L_key_pair" {
  key_name   = var.key_pair_name
  public_key = tls_private_key.A4L_private_key.public_key_openssh

  provisioner "local-exec" {
    command = "echo '${tls_private_key.A4L_private_key.private_key_pem}' > ./${var.key_pair_name}.pem"
  }
}

###################
# Create Instance #
###################

module "ec2_instance" {
  source = "terraform-aws-modules/ec2-instance/aws"

  name = "cloudwatch-test"

  ami = data.aws_ami.amazon_linux.id

  instance_type               = "t2.micro"
  key_name                    = aws_key_pair.A4L_key_pair.key_name
  monitoring                  = true
  associate_public_ip_address = true
  vpc_security_group_ids      = [aws_default_security_group.default.id]

  tags = {
    Terraform   = "true"
    Environment = "management"
  }
}
